{"ast":null,"code":"const subcribers = {\n  'messages-received': [],\n  'status-changed': []\n};\nlet ws = null;\n\nconst closeHandler = () => {\n  notifySubscribersAboutStatus('pending');\n  setTimeout(createChannel, 3000);\n};\n\nconst messageHandler = e => {\n  const newMessages = JSON.parse(e.data);\n  subcribers['messages-received'].forEach(s => s(newMessages));\n};\n\nconst openHandler = () => {\n  notifySubscribersAboutStatus('ready');\n};\n\nconst errorHandler = () => {\n  notifySubscribersAboutStatus('error');\n  console.error('REFRESH PAGE');\n};\n\nconst cleanUp = () => {\n  var _ws, _ws2, _ws3, _ws4;\n\n  (_ws = ws) === null || _ws === void 0 ? void 0 : _ws.removeEventListener('close', closeHandler);\n  (_ws2 = ws) === null || _ws2 === void 0 ? void 0 : _ws2.removeEventListener('message', messageHandler);\n  (_ws3 = ws) === null || _ws3 === void 0 ? void 0 : _ws3.removeEventListener('open', openHandler);\n  (_ws4 = ws) === null || _ws4 === void 0 ? void 0 : _ws4.removeEventListener('error', errorHandler);\n};\n\nconst notifySubscribersAboutStatus = status => {\n  subcribers['status-changed'].forEach(s => s(status));\n};\n\nfunction createChannel() {\n  var _ws5;\n\n  cleanUp();\n  (_ws5 = ws) === null || _ws5 === void 0 ? void 0 : _ws5.close();\n  ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx');\n  notifySubscribersAboutStatus('pending');\n  ws.addEventListener('close', closeHandler);\n  ws.addEventListener('message', messageHandler);\n  ws.addEventListener('open', openHandler);\n  ws.addEventListener('error', errorHandler);\n}\n\nexport const chatAPI = {\n  start() {\n    createChannel();\n  },\n\n  stop() {\n    var _ws6;\n\n    subcribers['messages-received'] = [];\n    subcribers['status-changed'] = [];\n    cleanUp();\n    (_ws6 = ws) === null || _ws6 === void 0 ? void 0 : _ws6.close();\n  },\n\n  subscribe(eventName, callback) {\n    // @ts-ignore\n    subcribers[eventName].push(callback);\n    return () => {\n      // @ts-ignore\n      subcribers[eventName] = subcribers[eventName].filter(s => s !== callback);\n    };\n  },\n\n  unsubscribe(eventName, callback) {\n    // @ts-ignore\n    subcribers[eventName] = subcribers[eventName].filter(s => s !== callback);\n  },\n\n  sendMessage(message) {\n    var _ws7;\n\n    (_ws7 = ws) === null || _ws7 === void 0 ? void 0 : _ws7.send(message);\n  }\n\n};","map":{"version":3,"sources":["C:/Users/1/Desktop/git-app/react-way-of-samurai/src/api/chat-api.ts"],"names":["subcribers","ws","closeHandler","notifySubscribersAboutStatus","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","data","forEach","s","openHandler","errorHandler","console","error","cleanUp","removeEventListener","status","close","WebSocket","addEventListener","chatAPI","start","stop","subscribe","eventName","callback","push","filter","unsubscribe","sendMessage","message","send"],"mappings":"AAAA,MAAMA,UAAU,GAAG;AACf,uBAAqB,EADN;AAEf,oBAAkB;AAFH,CAAnB;AAKA,IAAIC,EAAoB,GAAG,IAA3B;;AAGA,MAAMC,YAAY,GAAG,MAAM;AACvBC,EAAAA,4BAA4B,CAAC,SAAD,CAA5B;AACAC,EAAAA,UAAU,CAACC,aAAD,EAAgB,IAAhB,CAAV;AACH,CAHD;;AAIA,MAAMC,cAAc,GAAIC,CAAD,IAAqB;AACxC,QAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWH,CAAC,CAACI,IAAb,CAApB;AACAX,EAAAA,UAAU,CAAC,mBAAD,CAAV,CAAgCY,OAAhC,CAAwCC,CAAC,IAAIA,CAAC,CAACL,WAAD,CAA9C;AACH,CAHD;;AAIA,MAAMM,WAAW,GAAG,MAAM;AACtBX,EAAAA,4BAA4B,CAAC,OAAD,CAA5B;AACH,CAFD;;AAGA,MAAMY,YAAY,GAAG,MAAM;AACvBZ,EAAAA,4BAA4B,CAAC,OAAD,CAA5B;AACAa,EAAAA,OAAO,CAACC,KAAR,CAAc,cAAd;AACH,CAHD;;AAIA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAClB,SAAAjB,EAAE,UAAF,kCAAIkB,mBAAJ,CAAwB,OAAxB,EAAiCjB,YAAjC;AACA,UAAAD,EAAE,UAAF,oCAAIkB,mBAAJ,CAAwB,SAAxB,EAAmCb,cAAnC;AACA,UAAAL,EAAE,UAAF,oCAAIkB,mBAAJ,CAAwB,MAAxB,EAAgCL,WAAhC;AACA,UAAAb,EAAE,UAAF,oCAAIkB,mBAAJ,CAAwB,OAAxB,EAAiCJ,YAAjC;AACH,CALD;;AAMA,MAAMZ,4BAA4B,GAAIiB,MAAD,IAAwB;AACzDpB,EAAAA,UAAU,CAAC,gBAAD,CAAV,CAA6BY,OAA7B,CAAqCC,CAAC,IAAIA,CAAC,CAACO,MAAD,CAA3C;AACH,CAFD;;AAIA,SAASf,aAAT,GAAyB;AAAA;;AACrBa,EAAAA,OAAO;AACP,UAAAjB,EAAE,UAAF,oCAAIoB,KAAJ;AACApB,EAAAA,EAAE,GAAG,IAAIqB,SAAJ,CAAc,8DAAd,CAAL;AACAnB,EAAAA,4BAA4B,CAAC,SAAD,CAA5B;AACAF,EAAAA,EAAE,CAACsB,gBAAH,CAAoB,OAApB,EAA6BrB,YAA7B;AACAD,EAAAA,EAAE,CAACsB,gBAAH,CAAoB,SAApB,EAA+BjB,cAA/B;AACAL,EAAAA,EAAE,CAACsB,gBAAH,CAAoB,MAApB,EAA4BT,WAA5B;AACAb,EAAAA,EAAE,CAACsB,gBAAH,CAAoB,OAApB,EAA6BR,YAA7B;AACH;;AAGD,OAAO,MAAMS,OAAO,GAAG;AACnBC,EAAAA,KAAK,GAAG;AACJpB,IAAAA,aAAa;AAChB,GAHkB;;AAInBqB,EAAAA,IAAI,GAAG;AAAA;;AACH1B,IAAAA,UAAU,CAAC,mBAAD,CAAV,GAAkC,EAAlC;AACAA,IAAAA,UAAU,CAAC,gBAAD,CAAV,GAA+B,EAA/B;AACAkB,IAAAA,OAAO;AACP,YAAAjB,EAAE,UAAF,oCAAIoB,KAAJ;AACH,GATkB;;AAUnBM,EAAAA,SAAS,CAACC,SAAD,EAA6BC,QAA7B,EAAqG;AAC1G;AACA7B,IAAAA,UAAU,CAAC4B,SAAD,CAAV,CAAsBE,IAAtB,CAA2BD,QAA3B;AACA,WAAO,MAAM;AACT;AACA7B,MAAAA,UAAU,CAAC4B,SAAD,CAAV,GAAwB5B,UAAU,CAAC4B,SAAD,CAAV,CAAsBG,MAAtB,CAA6BlB,CAAC,IAAIA,CAAC,KAAKgB,QAAxC,CAAxB;AACH,KAHD;AAIH,GAjBkB;;AAkBnBG,EAAAA,WAAW,CAACJ,SAAD,EAA6BC,QAA7B,EAAqG;AAC5G;AACA7B,IAAAA,UAAU,CAAC4B,SAAD,CAAV,GAAwB5B,UAAU,CAAC4B,SAAD,CAAV,CAAsBG,MAAtB,CAA6BlB,CAAC,IAAIA,CAAC,KAAKgB,QAAxC,CAAxB;AACH,GArBkB;;AAsBnBI,EAAAA,WAAW,CAACC,OAAD,EAAkB;AAAA;;AACzB,YAAAjC,EAAE,UAAF,oCAAIkC,IAAJ,CAASD,OAAT;AACH;;AAxBkB,CAAhB","sourcesContent":["const subcribers = {\r\n    'messages-received': [] as MessagesReceivedSubscriberType[],\r\n    'status-changed': [] as StatusChangedSubscriberType[]\r\n}\r\n\r\nlet ws: WebSocket | null = null\r\ntype EventsNamesType = 'messages-received' | 'status-changed'\r\n\r\nconst closeHandler = () => {\r\n    notifySubscribersAboutStatus('pending')\r\n    setTimeout(createChannel, 3000)\r\n}\r\nconst messageHandler = (e: MessageEvent) => {\r\n    const newMessages = JSON.parse(e.data)\r\n    subcribers['messages-received'].forEach(s => s(newMessages))\r\n}\r\nconst openHandler = () => {\r\n    notifySubscribersAboutStatus('ready')\r\n}\r\nconst errorHandler = () => {\r\n    notifySubscribersAboutStatus('error')\r\n    console.error('REFRESH PAGE')\r\n}\r\nconst cleanUp = () => {\r\n    ws?.removeEventListener('close', closeHandler)\r\n    ws?.removeEventListener('message', messageHandler)\r\n    ws?.removeEventListener('open', openHandler)\r\n    ws?.removeEventListener('error', errorHandler)\r\n}\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n    subcribers['status-changed'].forEach(s => s(status))\r\n}\r\n\r\nfunction createChannel() {\r\n    cleanUp()\r\n    ws?.close()\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n    notifySubscribersAboutStatus('pending')\r\n    ws.addEventListener('close', closeHandler)\r\n    ws.addEventListener('message', messageHandler)\r\n    ws.addEventListener('open', openHandler)\r\n    ws.addEventListener('error', errorHandler)\r\n}\r\n\r\n\r\nexport const chatAPI = {\r\n    start() {\r\n        createChannel()\r\n    },\r\n    stop() {\r\n        subcribers['messages-received'] = []\r\n        subcribers['status-changed'] = []\r\n        cleanUp()\r\n        ws?.close()\r\n    },\r\n    subscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subcribers[eventName].push(callback)\r\n        return () => {\r\n            // @ts-ignore\r\n            subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\r\n        }\r\n    },\r\n    unsubscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message)\r\n    }\r\n}\r\n\r\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\r\ntype StatusChangedSubscriberType = (status: StatusType) => void\r\n\r\nexport type ChatMessageAPIType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\nexport type StatusType = 'pending' | 'ready' | 'error'\r\n"]},"metadata":{},"sourceType":"module"}