{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\1\\\\Desktop\\\\git-app\\\\react-way-of-samurai\\\\src\\\\pages\\\\Chat\\\\ChatPage.tsx\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { sendMessage, startMessagesListening, stopMessagesListening } from '../../redux/chat-reducer';\n\nconst ChatPage = () => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(Chat, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  }));\n};\n\nconst Chat = () => {\n  const dispatch = useDispatch();\n  const status = useSelector(state => state.chat.status);\n  useEffect(() => {\n    dispatch(startMessagesListening());\n    return () => {\n      dispatch(stopMessagesListening());\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 12\n    }\n  }, status === 'error' && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 32\n    }\n  }, \"Some error occured. Please refresh the page\"), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Messages, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(AddMessageForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  })));\n};\n\nconst Messages = ({}) => {\n  const messages = useSelector(state => state.chat.messages);\n  const messagesAnchorRef = useRef(null);\n  const [isAutoScroll, setIsAutoScroll] = useState(true);\n\n  const scrollHandler = e => {\n    const element = e.currentTarget;\n\n    if (Math.abs(element.scrollHeight - element.scrollTop - element.clientHeight) < 300) {\n      !isAutoScroll && setIsAutoScroll(true);\n    } else {\n      isAutoScroll && setIsAutoScroll(false);\n    }\n  };\n\n  useEffect(() => {\n    if (isAutoScroll) {\n      var _messagesAnchorRef$cu;\n\n      (_messagesAnchorRef$cu = messagesAnchorRef.current) === null || _messagesAnchorRef$cu === void 0 ? void 0 : _messagesAnchorRef$cu.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [messages]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: '400px',\n      overflowY: 'auto'\n    },\n    onScroll: scrollHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 12\n    }\n  }, messages.map((m, index) => /*#__PURE__*/React.createElement(Message, {\n    key: m.id,\n    message: m,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 37\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    ref: messagesAnchorRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }));\n};\n\nconst Message = React.memo(({\n  message\n}) => {\n  console.log(\">>>>>>Message\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: message.photo,\n    style: {\n      width: '30px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }), \" \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 60\n    }\n  }, message.userName), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }), message.message, /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }));\n});\n\nconst AddMessageForm = () => {\n  const [message, setMessage] = useState('');\n  const dispatch = useDispatch();\n  const status = useSelector(state => state.chat.status);\n\n  const sendMessageHandler = () => {\n    if (!message) {\n      return;\n    }\n\n    dispatch(sendMessage(message));\n    setMessage('');\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    onChange: e => setMessage(e.currentTarget.value),\n    value: message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    disabled: status !== 'ready',\n    onClick: sendMessageHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, \"Send\")));\n};\n\nexport default ChatPage;","map":{"version":3,"sources":["C:/Users/1/Desktop/git-app/react-way-of-samurai/src/pages/Chat/ChatPage.tsx"],"names":["React","useEffect","useRef","useState","useDispatch","useSelector","sendMessage","startMessagesListening","stopMessagesListening","ChatPage","Chat","dispatch","status","state","chat","Messages","messages","messagesAnchorRef","isAutoScroll","setIsAutoScroll","scrollHandler","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","current","scrollIntoView","behavior","height","overflowY","map","m","index","id","Message","memo","message","console","log","photo","width","userName","AddMessageForm","setMessage","sendMessageHandler","value"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\r\nimport {ChatMessageAPIType} from '../../api/chat-api'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {sendMessage, startMessagesListening, stopMessagesListening} from '../../redux/chat-reducer'\r\nimport {AppStateType} from '../../redux/redux-store'\r\n\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return <div>\r\n        <Chat/>\r\n    </div>\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [])\r\n\r\n    return <div>\r\n        {status === 'error' && <div>Some error occured. Please refresh the page</div>}\r\n        <>\r\n            <Messages/>\r\n            <AddMessageForm/>\r\n        </>\r\n    </div>\r\n}\r\n\r\nconst Messages: React.FC<{}> = ({}) => {\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget;\r\n        if (Math.abs( (element.scrollHeight - element.scrollTop) - element.clientHeight ) < 300)\r\n        {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages])\r\n\r\n    return <div style={{height: '400px', overflowY: 'auto'}} onScroll={scrollHandler}>\r\n        {messages.map((m, index) => <Message key={m.id} message={m}/>)}\r\n        <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n}\r\n\r\n\r\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo( ({message}) => {\r\n    console.log(\">>>>>>Message\")\r\n    return <div>\r\n        <img src={message.photo} style={{width: '30px'}}/> <b>{message.userName}</b>\r\n        <br/>\r\n        {message.message}\r\n        <hr/>\r\n    </div>\r\n})\r\n\r\n\r\nconst AddMessageForm: React.FC<{}> = () => {\r\n    const [message, setMessage] = useState('')\r\n    const dispatch = useDispatch()\r\n\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        dispatch(sendMessage(message))\r\n        setMessage('')\r\n    }\r\n\r\n    return <div>\r\n        <div>\r\n            <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\r\n        </div>\r\n        <div>\r\n            <button disabled={status !== 'ready'} onClick={sendMessageHandler}>Send</button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ChatPage\r\n"]},"metadata":{},"sourceType":"module"}