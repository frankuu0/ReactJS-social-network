{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\1\\\\Desktop\\\\git-app\\\\react-way-of-samurai\\\\src\\\\components\\\\Users\\\\Users.tsx\";\nimport React, { useEffect } from 'react';\nimport Paginator from '../common/Paginator/Paginator';\nimport User from './User';\nimport { UsersSearchForm } from './UsersSearchForm';\nimport { requestUsers } from '../../redux/users-reducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getCurrentPage, getFollowingInProgress, getPageSize, getTotalUsersCount, getUsers, getUsersFilter } from '../../redux/users-selectors';\nimport { useHistory } from 'react-router-dom';\nimport * as queryString from 'querystring';\nexport const Users = props => {\n  const users = useSelector(getUsers);\n  const totalUsersCount = useSelector(getTotalUsersCount);\n  const currentPage = useSelector(getCurrentPage);\n  const pageSize = useSelector(getPageSize);\n  const filter = useSelector(getUsersFilter);\n  const followingInProgress = useSelector(getFollowingInProgress);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  useEffect(() => {\n    const parsed = queryString.parse(history.location.search.substr(1));\n    let actualPage = currentPage;\n    let actualFilter = filter;\n    if (!!parsed.page) actualPage = Number(parsed.page);\n    if (!!parsed.term) actualFilter = { ...actualFilter,\n      term: parsed.term\n    };\n\n    switch (parsed.friend) {\n      case \"null\":\n        actualFilter = { ...actualFilter,\n          friend: null\n        };\n        break;\n\n      case \"true\":\n        actualFilter = { ...actualFilter,\n          friend: true\n        };\n        break;\n\n      case \"false\":\n        actualFilter = { ...actualFilter,\n          friend: false\n        };\n        break;\n    }\n\n    dispatch(requestUsers(actualPage, pageSize, actualFilter));\n  }, []);\n  useEffect(() => {\n    const query = {};\n    if (!!filter.term) query.term = filter.term;\n    if (filter.friend !== null) query.friend = String(filter.friend);\n    if (currentPage !== 1) query.page = String(currentPage);\n    history.push({\n      pathname: '/developers',\n      search: queryString.stringify(query)\n    });\n  }, [filter, currentPage]);\n\n  const onPageChanged = pageNumber => {\n    dispatch(requestUsers(pageNumber, pageSize, filter));\n  };\n\n  const onFilterChanged = filter => {\n    dispatch(requestUsers(1, pageSize, filter));\n  };\n\n  const follow = userId => {\n    dispatch(follow(userId));\n  };\n\n  const unfollow = userId => {\n    dispatch(unfollow(userId));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(UsersSearchForm, {\n    onFilterChanged: onFilterChanged,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Paginator, {\n    currentPage: currentPage,\n    onPageChanged: onPageChanged,\n    totalItemsCount: totalUsersCount,\n    pageSize: pageSize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, users.map(u => /*#__PURE__*/React.createElement(User, {\n    user: u,\n    followingInProgress: followingInProgress,\n    key: u.id,\n    unfollow: unfollow,\n    follow: follow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 32\n    }\n  }))));\n};","map":{"version":3,"sources":["C:/Users/1/Desktop/git-app/react-way-of-samurai/src/components/Users/Users.tsx"],"names":["React","useEffect","Paginator","User","UsersSearchForm","requestUsers","useDispatch","useSelector","getCurrentPage","getFollowingInProgress","getPageSize","getTotalUsersCount","getUsers","getUsersFilter","useHistory","queryString","Users","props","users","totalUsersCount","currentPage","pageSize","filter","followingInProgress","dispatch","history","parsed","parse","location","search","substr","actualPage","actualFilter","page","Number","term","friend","query","String","push","pathname","stringify","onPageChanged","pageNumber","onFilterChanged","follow","userId","unfollow","map","u","id"],"mappings":"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","sourcesContent":["import React, {FC, useEffect} from 'react'\r\nimport Paginator from '../common/Paginator/Paginator'\r\nimport User from './User'\r\nimport {UsersSearchForm} from './UsersSearchForm'\r\nimport {FilterType, requestUsers} from '../../redux/users-reducer'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from '../../redux/users-selectors'\r\nimport {useHistory} from 'react-router-dom'\r\nimport * as queryString from 'querystring'\r\n\r\ntype PropsType = {}\r\n\r\ntype QueryParamsType = { term?: string; page?: string; friend?: string }\r\nexport const Users: FC<PropsType> = (props) => {\r\n\r\n    const users = useSelector(getUsers)\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getUsersFilter)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        if (!!parsed.page) actualPage = Number(parsed.page)\r\n\r\n\r\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n\r\n        switch(parsed.friend) {\r\n            case \"null\":\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break;\r\n            case \"true\":\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break;\r\n            case \"false\":\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break;\r\n        }\r\n\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {}\r\n\r\n        if (!!filter.term) query.term = filter.term\r\n        if (filter.friend !== null) query.friend = String(filter.friend)\r\n        if (currentPage !== 1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: '/developers',\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(requestUsers(pageNumber, pageSize, filter))\r\n    }\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter))\r\n    }\r\n    const follow = (userId: number) => {\r\n        dispatch(follow(userId));\r\n    }\r\n    const unfollow = (userId: number) => {\r\n        dispatch(unfollow(userId));\r\n    }\r\n\r\n    return <div>\r\n\r\n        <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n\r\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\r\n                   totalItemsCount={totalUsersCount} pageSize={pageSize}/>\r\n        <div>\r\n            {\r\n                users.map(u => <User user={u}\r\n                                     followingInProgress={followingInProgress}\r\n                                     key={u.id}\r\n                                     unfollow={unfollow}\r\n                                     follow={follow}\r\n                    />\r\n                )\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}