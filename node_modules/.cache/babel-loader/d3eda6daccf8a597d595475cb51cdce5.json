{"ast":null,"code":"var UPDATE_NEW_MESSAGE_BODY = 'UPDATE_NEW_MESSAGE_BODY';\nvar SEND_MESSAGE = 'SEND_MESSAGE';\nvar initialState = {\n  dialogs: [{\n    id: 1,\n    name: 'Mike'\n  }, {\n    id: 2,\n    name: 'Anny'\n  }, {\n    id: 3,\n    name: 'Lisa'\n  }, {\n    id: 4,\n    name: 'John'\n  }],\n  messages: [{\n    id: 1,\n    message: 'Hi'\n  }, {\n    id: 2,\n    message: 'Hi?'\n  }, {\n    id: 3,\n    message: 'Who said hi?'\n  }, {\n    id: 4,\n    message: 'Im said hi.'\n  }],\n  newMessageBody: \"\"\n};\n\nvar dialogsReducer = function dialogsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case UPDATE_NEW_MESSAGE_BODY:\n      state.newMessageBody = action.body;\n      return state;\n\n    case SEND_MESSAGE:\n      var newMessage = state.newMessageBody;\n      var refresh = document.getElementById('typeMessageText');\n      refresh.value = '';\n      state.messages.push({\n        id: 6,\n        message: newMessage\n      });\n      return state;\n\n    default:\n      return state;\n  } // if (action.type === UPDATE_NEW_MESSAGE_BODY) {\n  //     state.newMessageBody = action.body;\n  // } else if (action.type === SEND_MESSAGE) {\n  //     let newMessage = state.newMessageBody;\n  //     let refresh = document.getElementById('typeMessageText');\n  //     refresh.value = '';\n  //     state.messages.push({id: 6, message: newMessage});\n  // }\n  // return state;\n\n};\n\nexport var sendMessageActionCreator = function sendMessageActionCreator() {\n  return {\n    type: SEND_MESSAGE\n  };\n};\nexport var updateNewMessageActionCreator = function updateNewMessageActionCreator(body) {\n  return {\n    type: UPDATE_NEW_MESSAGE_BODY,\n    body: body\n  };\n};\nexport default dialogsReducer;","map":{"version":3,"sources":["C:/Users/1/Desktop/NewReact-app/ReactJS-social-network/src/redux/dialogs-reducer.js"],"names":["UPDATE_NEW_MESSAGE_BODY","SEND_MESSAGE","initialState","dialogs","id","name","messages","message","newMessageBody","dialogsReducer","state","action","type","body","newMessage","refresh","document","getElementById","value","push","sendMessageActionCreator","updateNewMessageActionCreator"],"mappings":"AAAA,IAAMA,uBAAuB,GAAG,yBAAhC;AACA,IAAMC,YAAY,GAAG,cAArB;AAEA,IAAIC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,CACP;AAACC,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,IAAI,EAAE;AAAd,GADO,EAEP;AAACD,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,IAAI,EAAE;AAAd,GAFO,EAGP;AAACD,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,IAAI,EAAE;AAAd,GAHO,EAIP;AAACD,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,IAAI,EAAE;AAAd,GAJO,CADQ;AAOnBC,EAAAA,QAAQ,EAAG,CACP;AAACF,IAAAA,EAAE,EAAE,CAAL;AAAQG,IAAAA,OAAO,EAAE;AAAjB,GADO,EAEP;AAACH,IAAAA,EAAE,EAAE,CAAL;AAAQG,IAAAA,OAAO,EAAE;AAAjB,GAFO,EAGP;AAACH,IAAAA,EAAE,EAAE,CAAL;AAAQG,IAAAA,OAAO,EAAE;AAAjB,GAHO,EAIP;AAACH,IAAAA,EAAE,EAAE,CAAL;AAAQG,IAAAA,OAAO,EAAE;AAAjB,GAJO,CAPQ;AAanBC,EAAAA,cAAc,EAAE;AAbG,CAAnB;;AAgBA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBR,YAAyB;AAAA,MAAXS,MAAW;;AACrD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKZ,uBAAL;AACIU,MAAAA,KAAK,CAACF,cAAN,GAAuBG,MAAM,CAACE,IAA9B;AACA,aAAOH,KAAP;;AACJ,SAAKT,YAAL;AACI,UAAIa,UAAU,GAAGJ,KAAK,CAACF,cAAvB;AACA,UAAIO,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,iBAAxB,CAAd;AACAF,MAAAA,OAAO,CAACG,KAAR,GAAgB,EAAhB;AACAR,MAAAA,KAAK,CAACJ,QAAN,CAAea,IAAf,CAAoB;AAACf,QAAAA,EAAE,EAAE,CAAL;AAAQG,QAAAA,OAAO,EAAEO;AAAjB,OAApB;AACA,aAAOJ,KAAP;;AACJ;AACI,aAAOA,KAAP;AAXR,GADqD,CAerD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACH,CAzBD;;AA2BA,OAAO,IAAMU,wBAAwB,GAAG,SAA3BA,wBAA2B,GAAM;AAC1C,SAAO;AACLR,IAAAA,IAAI,EAAEX;AADD,GAAP;AAGD,CAJI;AAKP,OAAO,IAAMoB,6BAA6B,GAAG,SAAhCA,6BAAgC,CAACR,IAAD,EAAU;AACnD,SAAO;AACLD,IAAAA,IAAI,EAAEZ,uBADD;AAC0Ba,IAAAA,IAAI,EAAEA;AADhC,GAAP;AAGD,CAJI;AAMP,eAAeJ,cAAf","sourcesContent":["const UPDATE_NEW_MESSAGE_BODY = 'UPDATE_NEW_MESSAGE_BODY';\r\nconst SEND_MESSAGE = 'SEND_MESSAGE';\r\n\r\nlet initialState = {\r\n  dialogs: [\r\n    {id: 1, name: 'Mike'},\r\n    {id: 2, name: 'Anny'},\r\n    {id: 3, name: 'Lisa'},\r\n    {id: 4, name: 'John'},\r\n],\r\nmessages:  [\r\n    {id: 1, message: 'Hi'},\r\n    {id: 2, message: 'Hi?'},\r\n    {id: 3, message: 'Who said hi?'},\r\n    {id: 4, message: 'Im said hi.'},\r\n],\r\nnewMessageBody: \"\"\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case UPDATE_NEW_MESSAGE_BODY:\r\n            state.newMessageBody = action.body;\r\n            return state;\r\n        case SEND_MESSAGE:\r\n            let newMessage = state.newMessageBody;\r\n            let refresh = document.getElementById('typeMessageText');\r\n            refresh.value = '';\r\n            state.messages.push({id: 6, message: newMessage});\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n\r\n    // if (action.type === UPDATE_NEW_MESSAGE_BODY) {\r\n    //     state.newMessageBody = action.body;\r\n    // } else if (action.type === SEND_MESSAGE) {\r\n    //     let newMessage = state.newMessageBody;\r\n    //     let refresh = document.getElementById('typeMessageText');\r\n    //     refresh.value = '';\r\n    //     state.messages.push({id: 6, message: newMessage});\r\n    // }\r\n\r\n    // return state;\r\n}\r\n\r\nexport const sendMessageActionCreator = () => {\r\n    return {\r\n      type: SEND_MESSAGE\r\n    }\r\n  }\r\nexport const updateNewMessageActionCreator = (body) => {\r\n    return {\r\n      type: UPDATE_NEW_MESSAGE_BODY, body: body\r\n    }\r\n  }\r\n\r\nexport default dialogsReducer;"]},"metadata":{},"sourceType":"module"}