{"ast":null,"code":"import { chatAPI } from '../api/chat-api';\nimport { v1 } from 'uuid';\nlet initialState = {\n  messages: [],\n  status: 'pending'\n};\n\nconst chatReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'SN/chat/MESSAGES_RECEVIED':\n      return { ...state,\n        messages: [...state.messages, ...action.payload.messages.map(m => ({ ...m,\n          id: v1()\n        }))].filter((m, index, array) => index >= array.length - 100)\n      };\n\n    case 'SN/chat/STATUS_CHANGED':\n      return { ...state,\n        status: action.payload.status\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = {\n  messagesReceived: messages => ({\n    type: 'SN/chat/MESSAGES_RECEVIED',\n    payload: {\n      messages\n    }\n  }),\n  statusChanged: status => ({\n    type: 'SN/chat/STATUS_CHANGED',\n    payload: {\n      status\n    }\n  })\n};\nlet _newMessageHandler = null;\n\nconst newMessageHandlerCreator = dispatch => {\n  if (_newMessageHandler === null) {\n    _newMessageHandler = messages => {\n      dispatch(actions.messagesReceived(messages));\n    };\n  }\n\n  return _newMessageHandler;\n};\n\nlet _statusChangedHandler = null;\n\nconst statusChangedHandlerCreator = dispatch => {\n  if (_statusChangedHandler === null) {\n    _statusChangedHandler = status => {\n      dispatch(actions.statusChanged(status));\n    };\n  }\n\n  return _statusChangedHandler;\n};\n\nexport const startMessagesListening = () => async dispatch => {\n  chatAPI.start();\n  chatAPI.subscribe('messages-received', newMessageHandlerCreator(dispatch));\n  chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch));\n};\nexport const stopMessagesListening = () => async dispatch => {\n  chatAPI.unsubscribe('messages-received', newMessageHandlerCreator(dispatch));\n  chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch));\n  chatAPI.stop();\n};\nexport const sendMessage = message => async dispatch => {\n  chatAPI.sendMessage(message);\n};\nexport default chatReducer;","map":{"version":3,"sources":["C:/Users/1/Desktop/git-app/react-way-of-samurai/src/redux/chat-reducer.ts"],"names":["chatAPI","v1","initialState","messages","status","chatReducer","state","action","type","payload","map","m","id","filter","index","array","length","actions","messagesReceived","statusChanged","_newMessageHandler","newMessageHandlerCreator","dispatch","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","start","subscribe","stopMessagesListening","unsubscribe","stop","sendMessage","message"],"mappings":"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","sourcesContent":["import {ResultCodeForCapcthaEnum, ResultCodesEnum} from '../api/api'\r\nimport {stopSubmit} from 'redux-form'\r\nimport {authAPI} from '../api/auth-api'\r\nimport {securityAPI} from '../api/security-api'\r\nimport {BaseThunkType, InferActionsTypes} from './redux-store'\r\nimport {Action, Dispatch} from 'redux'\r\nimport {FormAction} from 'redux-form/lib/actions'\r\nimport {chatAPI, ChatMessageAPIType, StatusType} from '../api/chat-api'\r\nimport {v1} from 'uuid'\r\n\r\ntype ChatMessageType = ChatMessageAPIType & {id: string}\r\n\r\nlet initialState = {\r\n    messages: [] as ChatMessageType[],\r\n    status: 'pending' as StatusType\r\n}\r\n\r\nconst chatReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/chat/MESSAGES_RECEVIED':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, ...action.payload.messages.map( m => ({...m, id: v1() }))]\r\n                    .filter((m, index, array) => index >= array.length - 100)\r\n            }\r\n        case 'SN/chat/STATUS_CHANGED':\r\n            return {\r\n                ...state,\r\n                status: action.payload.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    messagesReceived: (messages: ChatMessageAPIType[]) => ({\r\n        type: 'SN/chat/MESSAGES_RECEVIED', payload: {messages}\r\n    } as const),\r\n    statusChanged: (status: StatusType) => ({\r\n        type: 'SN/chat/STATUS_CHANGED', payload: {status}\r\n    } as const)\r\n}\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_newMessageHandler === null) {\r\n        _newMessageHandler = (messages) => {\r\n            dispatch(actions.messagesReceived(messages))\r\n        }\r\n    }\r\n    return _newMessageHandler\r\n}\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_statusChangedHandler === null) {\r\n        _statusChangedHandler = (status) => {\r\n            dispatch(actions.statusChanged(status))\r\n        }\r\n    }\r\n    return _statusChangedHandler\r\n}\r\n\r\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.start()\r\n    chatAPI.subscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n    chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n\r\n}\r\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.unsubscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n    chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n    chatAPI.stop()\r\n}\r\n\r\nexport const sendMessage = (message: string): ThunkType => async (dispatch) => {\r\n    chatAPI.sendMessage(message)\r\n}\r\n\r\n\r\nexport default chatReducer\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n"]},"metadata":{},"sourceType":"module"}